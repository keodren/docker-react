image: docker:latest

services:
  - docker:dind

stages:
  - build-test
  - test
  - build-deploy
  - deploy

variables:
  APP_VERSION: $CI_PIPELINE_IID

build-test:
  stage: build-test
#  image: docker:latest
  script:
    - echo "Building project..."
    - docker build -t docker-react-project -f Dockerfile.dev .
    - echo "Finished building"
    - echo "Saving image..."
    - mkdir image
    - docker save docker-react-project > image/docker-react-project.tar 
#    - echo "Running tests..."
#    - docker run -e CI=true docker-react-project npm run test
  artifacts:
    paths:
      - image

basic-test:
  stage: test
#  image: docker:latest
  script:
    - echo "Preparing to run tests..."
    - docker load -i image/docker-react-project.tar
    - echo "Running tests..."
    - docker run -e CI=true docker-react-project npm run test

build-deploy:
  stage: build-deploy
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - echo "Building production image..."
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION .
    - docker image ls
    - echo "Pushing image to Gitlab private registry..."
    - docker push --all-tags $CI_REGISTRY_IMAGE

deploy to aws:
  image:
    name: amazon/aws-cli:2.7.29
    entrypoint: [""]
  stage: deploy
  script:
    - aws --version
    - yum install -y gettext
    - export DEPLOY_TOKEN=$(echo "$GITLAB_DEPLOY_TOKEN" | tr -d "\n" | base64)
    - envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < templates/auth.json > auth.json
    - cat Dockerrun.aws.json
    - cat auth.json
    - aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
    - aws s3 cp auth.json s3://$AWS_S3_BUCKET/auth.json